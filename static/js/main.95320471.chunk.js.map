{"version":3,"sources":["cssToJSXStyle.js","convert.js","App.js","serviceWorker.js","index.js"],"names":["cleanPropertyName","name","replace","v","toUpperCase","mediaNameGenerator","nameGenerator","transform","inputCssText","Error","bootstrapWithCssClass","indexOf","concat","result","transformRules","self","rules","forEach","rule","obj","type","media","__expression__","declarations","declaration","cleanProperty","property","value","selectors","selector","trim","this","cssParser","parse","stylesheet","require","JSON5","sentanceCase","string","charAt","slice","parseFile","filePath","input","otherMode","substr","lastIndexOf","split","getFile","examples","output","firstTag","imports","collect","props","example","argumentTags","staticCode","atTags","addToOutput","parser","createParser","onText","event","collecting","i","length","onPlaceholder","escaped","withinBody","withinAttribute","withinString","withinOpenTag","pos","onCDATA","onOpenTag","tagName","attributes","argument","funcName","nameAttr","find","a","outputName","push","enterParsedTextContentState","mapping","for","class","map","_ref2","join","attribute","word","JSON","stringify","literalValue","_ref","onCloseTag","includes","acc","_ref3","_unused","content","_unused2","onDocumentType","onDeclaration","onComment","onScriptlet","onError","message","code","console","log","flowType","functionArgs","App","state","componentState","exampleState","convert","exampleIndex","hideJSX","valueChange","_this","setState","index","_this2","react_default","createElement","className","onClick","style","display","width","lib_default","onValueChange","highlight","languages","markup","padding","fontFamily","fontSize","height","js","es","key","codeText","noRender","scope","useState","React","ReactDOM","Button","margin","prop","propName","onChange","target","Object","objectSpread","defineProperty","Component","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95320471.chunk.js","sourcesContent":["import cssParser from 'css';\n\n//\n// Transform implementation or originally thanks to\n// https://github.com/raphamorim/native-css\n//\n\nfunction transformRules(self, rules, result) {\n    rules.forEach(function (rule) {\n        var obj = {};\n        if (rule.type === 'media') {\n            var name = mediaNameGenerator(rule.media);\n            var media = result[name] = result[name] || {\n                \"__expression__\": rule.media\n            };\n            transformRules(self, rule.rules, media)\n        } else if (rule.type === 'rule') {\n            rule.declarations.forEach(function (declaration) {\n                if (declaration.type === 'declaration') {\n                    var cleanProperty = cleanPropertyName(declaration.property);\n                    obj[cleanProperty] = declaration.value;\n                }\n            });\n            rule.selectors.forEach(function (selector) {\n                var name = nameGenerator(selector.trim());\n                result[name] = obj;\n            });\n        }\n    });\n}\n\nvar cleanPropertyName = function(name) {\n\n    // turn things like 'align-items' into 'alignItems'\n    name = name.replace(/(-.)/g, function(v) { return v[1].toUpperCase(); })\n\n    return name;\n}\n\nvar mediaNameGenerator = function (name) {\n    return '@media ' + name;\n};\n\nvar nameGenerator = function (name) {\n    name = name.replace(/\\s\\s+/g, ' ');\n    name = name.replace(/[^a-zA-Z0-9]/g, '_');\n    name = name.replace(/^_+/g, '');\n    name = name.replace(/_+$/g, '');\n\n    return name;\n};\n\nexport function transform (inputCssText) {\n\n  if(!inputCssText) {\n    throw new Error('missing css text to transform');\n  }\n\n  // If the input \"css\" doesn't wrap it with a css class (raw styles)\n  // we need to wrap it with a style so the css parser doesn't choke.\n  var bootstrapWithCssClass = false;\n  if(inputCssText.indexOf(\"{\") === -1) {\n    bootstrapWithCssClass = true;\n    inputCssText = `.bootstrapWithCssClass { ${inputCssText} }`;\n  }\n\n  var css = cssParser.parse(inputCssText);\n  var result = {};\n  transformRules(this, css.stylesheet.rules, result);\n\n  // Don't expose the implementation detail of our wrapped css class.\n  if(bootstrapWithCssClass) {\n    result = result.bootstrapWithCssClass;\n  }\n\n  return result;\n}","import { transform } from './cssToJSXStyle'\n\nvar htmljs = require('htmljs-parser');\nconst JSON5 = require('json5')\n\nfunction getFile(filePath) {\n    return filePath.substr(filePath.lastIndexOf('\\/') + 1).split('.')[0];\n}\n\nfunction sentanceCase(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n\n\n\nfunction parseFile(filePath, input, otherMode)  {\n    const name = sentanceCase(getFile(filePath));\n    \n\n    const examples = []\n    let output = `const ${name} = ({ props } : Props) => { \\n`\n\n    if(otherMode) {\n        output = `const ${name} = ({ props }) => { \\n`\n    }\n\nlet firstTag = true;\n\nconst imports = {\n    collect: false,\n    value: ''\n}\n\nconst props = {\n    collect: false,\n    value: ''\n}\n\nconst example = {\n    collect: false,\n    value: '',\n}\nconst argumentTags = []\n\nlet staticCode = {\n    collect: false,\n    value: ''\n}\n\nconst atTags = {\n    collect: false,\n    value: '',\n}\n\n\nfunction addToOutput(value) {\n    if(atTags.collect) {\n        atTags.value += value\n        return\n    }\n    output += value;\n}\n\nvar parser = require('htmljs-parser').createParser({\n    onText: function(event) {\n        // Text within an HTML element\n        var value = event.value;\n        //console.log('text', event)\n        if(imports.collect) {\n            imports.value += value;\n            imports.collect = false\n            return\n        }\n\n        const collecting = [imports, props, example, staticCode]\n        for(var i = 0; i < collecting.length; i++) {\n            if(collecting[i].collect) {\n                collecting[i].value += value;\n                collecting[i].collect = false\n                return\n            }\n        }\n    \n        addToOutput(value);\n    },\n\n    \n    onPlaceholder: function(event) {\n        //  ${<value>]} // escape = true\n        // $!{<value>]} // escape = false\n        var value = event.value; // String\n        var escaped = event.escaped; // boolean\n        var withinBody = event.withinBody; // boolean\n        var withinAttribute = event.withinAttribute; // boolean\n        var withinString = event.withinString; // boolean\n        var withinOpenTag = event.withinOpenTag; // boolean\n        var pos = event.pos; // Integer\n        //console.log('ph', event)\n        \n            addToOutput(`{ ${value} }`)\n        \n    },\n\n    onCDATA: function(event) {\n        // <![CDATA[<value>]]>\n        var value = event.value; // String\n        var pos = event.pos; // Integer\n       // console.log('cdata', event)\n    },\n\n    onOpenTag: function(event) {\n        var tagName = event.tagName; // String\n        var attributes = event.attributes; // Array\n        var argument = event.argument; // Object\n        var pos = event.pos; // Integer\n       // console.log('ot', event)\n\n       if(argument) {\n           const funcName = tagName\n           const nameAttr = attributes.find(a => a.name[0] === ':')\n           const outputName = nameAttr && nameAttr.name.replace(':', '')\n           \n            argumentTags.push(tagName)\n           addToOutput(`\n           { ${funcName}(${argument.value})((${outputName ? outputName : ''}) => (<React.Fragment>\n           `);\n           return;\n           }\n\n   \n        if(tagName === 'imports') {\n            parser.enterParsedTextContentState();\n            imports.collect = true;\n            return;\n        } \n\n        if(tagName === 'import') {\n            imports.value += 'import ' + event.attributes.map(({ name }) => name).join(' ')\n            return;\n        }\n\n        if(tagName === 'props') {\n            parser.enterParsedTextContentState();\n            props.collect = true;\n            return;\n        } \n\n        if(tagName === 'example') {\n            parser.enterParsedTextContentState();\n            example.collect = true;\n            example.event = event;\n            return;\n        } \n\n     \n\n        const mapping = {\n            for: 'htmlFor',\n            class: 'className',\n        }\n\n\n        if(tagName === 'static') {\n            parser.enterParsedTextContentState();\n            staticCode.collect = true;\n            staticCode.value += event.attributes && event.attributes.map(({name}) => name).join(' ')\n            return;\n        } \n        \n\n        if(firstTag) {\n            firstTag = false;\n            addToOutput(`return (<React.Fragment>`)\n        }\n\n        if(tagName[0] === '@') {\n            atTags.collect = true;\n            \n\n            debugger;\n            addToOutput('const ' + tagName.replace('@', '') +  ' = ({' + attributes.map((attribute) => \n                 attribute.name.replace(':', '')).join(',') + '}) => (<React.Fragment>')\n            return;\n        }\n\n\n        addToOutput(`<${tagName} ${attributes.map((attribute) => {\n            let name =  mapping[attribute.name] || attribute.name \n            name = name.split('-').map((word, i) => i ===  0 ? word : sentanceCase(word)).join('')\n            if(name === 'style') {\n                if(attribute.value[0] === '\"') {\n                   return `${name}={${JSON.stringify(transform(attribute.literalValue))}}`\n                }\n            }\n            if(attribute.value && name === 'class') {\n                let value = attribute.value\n                if(value[0] === '[') {\n                   value = value +  \".filter((a) => a).join(' ')\"\n                }\n                if(value[0] === '{') {\n                    value = \"Object.entries(\" + value +  \").filter((a) => a[1]).map(a => a[0]).join(' ')\"\n                }\n                return `className={${value}}`\n             //  \n            }\n            if(!name) {\n                return `{...${attribute.value}}`\n            }\n            return `${name}={ ${attribute.value || JSON.stringify(attribute.argument)} } `\n        }).join(' ')}>`);\n\n    },\n\n    onCloseTag: function(event) {\n        // close tag\n        var tagName = event.tagName; // String\n        var pos = event.pos; // Integer\n        if(tagName === 'imports' || tagName === 'props' || tagName === 'static') {\n            return;\n        }\n        if(tagName[0] === '@') {\n            addToOutput('</React.Fragment >)\\n')\n            atTags.collect = false\n            return;\n        }\n        if(tagName === 'example') {\n            const acc  = {};\n            example.event.attributes.forEach(({ name, value }) => {\n                try {\n                    acc[name] = JSON5.parse(value);\n                } catch {\n                    addToOutput('ERRERE')\n                }\n            })\n            try {\n            acc.content = JSON5.parse(`{${example.value}}`);\n            example.value =  ''\n            examples.push(acc);\n            } catch {\n                addToOutput('error!')\n            }\n            return;\n        }\n        if(argumentTags.includes(tagName)) {\n            addToOutput('</ React.Fragment>))}');\n            return\n        }\n       // console.log('ct', event)\n        addToOutput(`</${tagName}>`);\n    },\n\n    onDocumentType: function(event) {\n        // Document Type/DTD\n        // <!<value>>\n        // Example: <!DOCTYPE html>\n        var value = event.value; // String\n        var pos = event.pos; // Integer\n      //  console.log('dt', event)\n    },\n\n    onDeclaration: function(event) {\n        // Declaration\n        // <?<value>?>\n        // Example: <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n        var value = event.value; // String\n        var pos = event.pos; // Integer\n      //  console.log('d', event)\n    },\n\n    onComment: function(event) {\n        // Text within XML comment\n        var value = event.value; // String\n        var pos = event.pos; // Integer\n      //  console.log('c', event)\n    },\n\n    onScriptlet: function(event) {\n        // Text within <% %>\n        var value = event.value; // String\n        var pos = event.pos; // Integer\n     //   console.log('sc', event)\n        // if(!firstTag) {\n        //     addToOutput('erorr!!!'\n        // }\n        addToOutput(value);\n        \n    },\n\n    onError: function(event) {\n        // Error\n        var message = event.message; // String\n        var code = event.code; // String\n        var pos = event.pos; // Integer\n        console.log('error', event)\n    }\n});\n\n\nparser.parse(input);\n\nconst flowType = props.value\n\nconst functionArgs = props.value.split(',').map(a => a.split(':')[0]).join(',')\naddToOutput('</ React.Fragment>) \\n }')\noutput = `\n${ otherMode  ? '' : '//@flow'  }\n${ otherMode  ? '' : (imports.value || `import React from 'react';`)}\n${ otherMode  ? '' : `\ntype Props = {\n    ${flowType}\n}\n`   }\n${staticCode.value}\n${ output.replace('props', functionArgs) }\n${atTags.value}\n${ otherMode  ? `\nReactDOM.render(<${name} {...componentState}/>, mountNode);\n` : `\nexport default ${name};\n`}\n\n`\nreturn ({ examples, output,  props: props.value })\n}\n\n\n\n\n\n\nexport default parseFile;","import React, { useState } from 'react';\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-markup';\nimport Playground from 'component-playground';\nimport ReactDOM from 'react-dom';\nimport 'todomvc-app-css/index.css';\nimport './App.css'\n\nimport {\n  LiveProvider,\n  LivePreview,\n  LiveEditor\n} from 'react-live'\n\nimport 'prismjs/themes/prism.css';\nimport convert from './convert' \nimport { root } from 'postcss-selector-parser';\n\nconst code = `\n<props>\n    title: string,\n    content: string\n</props>\n\n<example name=\"with title of Hello\">\n  title: \"Hello\"\n</example>\n\n<example name=\"with content of Hello\">\n  title: \"My content is Hello\",\n  content: \"Hello\"\n</example>\n\n\n<div>\n    <h1>Title: {title}</h1>\n    <p>Content: {content}</p>\n</div>\n`;\n\nconst code2 = `\n$ const ENTER_KEY = 13;\n\n$ const [todos, setTodos] = useState([{ done: true, name: 'A todo' }, { done: false, name: 'Bob' }])\n$ const [currentFilter, setCurrentFilter] = useState('All')\n\n$ const map = (input) => (block) => input.map(value => block(value))\n$ const mapWithIndex = (input) => (block) => input.map((value, index) => block({ ...value, index }))\n$ const If = (input) => (block) => !!input && block()\n\n$ const allCompleted = !todos.find(({ done }) => !done)\n\n\n$ const filtered = {\n    All: todos,\n    Active: todos.filter(({ done }) => !done),\n    Completed: todos.filter(({ done }) => done),\n};\n\n$ const filters = Object.keys(filtered);\n\n$ const [newTodo, setNewTodo] = useState('');\n\n\n$ const updateTodo = (index, update) => {\n      setTodos(todos.map((todo, i) => {\n      if(i === index) {\n        return {\n        ...todo,\n        ...update,\n        }\n      }\n      return todo;\n    }))\n};\n\n$ function toggleTodo(index) {\n  return () => {\n    updateTodo(index,{ done: !todos[index].done })\n  }\n}\n\n$ function completeAllToggle() {\n  setTodos(todos.map((todo) => ({ ...todo, done: !allCompleted }))\n  )\n}\n\n$ function deleteTodo(index)  {\n  return () => {\n    setTodos(todos.filter((todo, i) => i !== index))\n  }\n}\n\n$ function clearCompleted() {\n  setTodos(todos.filter((todo) => !todo.done))\n}\n\n\n$ function handleNewTodoKeyDown(event) {\n  if (event.keyCode !== ENTER_KEY) {\n    return;\n  } \n\n  event.preventDefault();\n\n  var val = newTodo.trim();\n\n  if (val) {\n     setTodos([...todos, {\n       done: false,\n       name: val,\n     }]);\n     setNewTodo('');\n  }\n}\n\n<section class=\"todoapp\">\n\t<header class=\"header\">\n\t\t<h1>todos</h1>\n        <input \n            class=\"new-todo\" \n            placeholder=\"What needs to be done?\" \n            autofocus=\"\"\n            value=newTodo\n\t\t\tonKeyDown=handleNewTodoKeyDown\n\t\t\tonChange=(({ target }) => setNewTodo(target.value))\n         />\n\t</header>\n\t<section class=\"main\" style=\"display: block;\">\n        <input class=\"toggle-all\" onChange=completeAllToggle checked=allCompleted id=\"toggle-all\" type=\"checkbox\">\n        <label for=\"toggle-all\">Mark all as complete</label>\n        <ul class=\"todo-list\">\n            <mapWithIndex(filtered[currentFilter]) :todo>\n                <li class=todo.done&&'completed'>\n                    <div class=\"view\">\n                        <input class=\"toggle\" onChange=toggleTodo(todo.index) checked=todo.done type=\"checkbox\">\n                        <label>\\${todo.name}</label>\n                        <button onClick=deleteTodo(todo.index) class=\"destroy\"></button>\n                    </div>\n                    <input class=\"edit\" value=\"A todo\">\n                </li>\n            </mapWithIndex>\n        </ul>\n    </section>\n    <footer class=\"footer\" style=\"display: block;\">\n        <span class=\"todo-count\"><strong>\\${filtered.Active.length}</strong> items left</span>\n        <ul class=\"filters\">\n            <map(filters) :filter>\n                <li>\n                    <a class=(filter === currentFilter && \"selected\") href=\"#\" onClick=(() => setCurrentFilter(filter))>{filter}</a>\n                </li>\n            </map>  \n        </ul>\n        <If(filtered.Completed.length)>\n            <button class=\"clear-completed\" onClick=clearCompleted>Clear completed</button>\n        </If>\n    </footer>\n</section>\n\n`\n \nconst testcode = `\n\n<props>\n    world: string,\n    intialCount: number\n</props>\n\n<example name=\"Hello World\">\n  world: \"world\",\n  intialCount: \"10\",\n</example>\n$ const [ count, setCounter ] = React.useState(intialCount)\n\n$ const increment = () => setCounter(count + 1)\n$ const decrement = () => setCounter(count - 1)\n$ const groups = [{ name: 'Test', numbers: [14, 18] }, { name: 'Other', numbers: [20,30]}];\n\n\n$ const map = (input) => (block) => input.map(value => block(value))\n\n$ const If = (input) => (block) => input && block()\n\n\n<div>\nHello \\${world}\nWow this is really crazy \\${ count }\n<div>\n  its just html\n</div>\n\n<map(groups) :group>\n  \\${ group.name }\n  <map(group.numbers) :number>\n    <button onClick=(() => setCounter(number))>{number}</button>\n  </map> \n</map>\n\n<If(count === 10)>\n  <div>its 10</div>\n</If>\n\n<If(count > 14)>\n  <div>Wow its over 14</div>\n</If>\n\n\n\n<button onClick=increment>increment</button>\n<button onClick=decrement>decrement</button>\n</div>\n\n`\n\n\nclass App extends React.Component {\n  state = { \n    code, \n    componentState: {},\n    exampleState: {},\n    output: convert('awesomeo.ma', code, false),\n    exampleIndex: 0,\n    hideJSX: true,\n   };\n\n   valueChange = (code, i) => {\n    const output = convert('awesomeo.ma', code, false)\n     this.setState({ code, output })\n     const index = (i === 0 || i) ? i : this.state.exampleIndex\n     if(output.examples[index]) {\n       if((i === 0 || i) || JSON.stringify(this.state.exampleState) !== JSON.stringify(output.examples[index].content)) {\n        this.setState({ componentState: output.examples[index].content })\n       }\n       this.setState({ exampleState: output.examples[index].content })\n     }\n   }\n   componentDidMount() {\n    this.valueChange(this.state.code);\n   }\n \n  render() {\n    const hideJSX  = this.state.hideJSX\n    const output = this.state.output\n    return (\n\n      <div>\n        \n        <button className=\"myButton\" onClick={() =>this.setState(({ hideJSX }) => ({ hideJSX: !hideJSX  })) }>HideJSX</button>\n\n\n      <button className=\"myButton\"  onClick={() =>this.valueChange(code)}>Card.htmlx</button>\n      <button className=\"myButton\" onClick={() => this.valueChange(code2)}>TodoMVC.htmlx</button>\n      <button className=\"myButton\"  onClick={() => this.valueChange(testcode)}>Test.htmlx</button>\n\n      <div style={{ display: 'flex' }}>\n     \n        <div style={{ width: hideJSX ? '50%': '30%', }}>\n      <Editor \n        value={this.state.code}\n        onValueChange={this.valueChange}\n        highlight={code => {\n          return highlight(code, languages.markup)\n          }}\n        padding={10}\n        style={{\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n          fontSize: 12,\n          height: '100vh',\n        }}\n      />\n        </div>\n        { !hideJSX && <div style={{ width: hideJSX ? '50%': '30%', }}>\n      <Editor \n        value={output.output }\n        onValueChange={code => {}}\n        highlight={code => highlight(code, languages.js)}\n        padding={10}\n        style={{\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n          fontSize: 12,\n          height: '100vh',\n        }}\n      />\n      \n\n        \n      \n              </div>\n        }\n              <div style={{ width: hideJSX ? '50%': '30%', }}>\n\n        <Playground \n        key={JSON.stringify(this.state.componentState)}  \n codeText={ convert('awesomeo.ma', this.state.code, true).output} noRender={false} scope={{ useState, componentState: this.state.componentState, React: React, ReactDOM: ReactDOM, Button: (props) => <div {...props} /> }}/>\n            \n            <div  style={{margin: 200}}></div>\n            <h1>Props:</h1>\n\n            {output.props.split(',').map((prop) => {\n              const propName = prop.split(':')[0].replace(/\\s/g, '')\n              return <div>{prop}<input value={this.state.componentState[propName] || ''} onChange={({ target }) => this.setState({ \n                componentState: {\n                ...this.state.componentState,\n                [propName]: target.value,\n              }\n            })\n          }></input></div>\n            })}\n            {this.state.output.examples.map((example, i) => <button \n            className=\"myButton\"\n            onClick={() => {\n              this.setState({exampleIndex: i})\n              this.valueChange(this.state.code, i)\n              }}>{this.state.exampleIndex === i && 'current: '}{example.name}</button> )}\n              </div>\n      </div>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}