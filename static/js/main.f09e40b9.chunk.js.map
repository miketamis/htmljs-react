{"version":3,"sources":["convert.js","App.js","serviceWorker.js","index.js"],"names":["require","parseFile","filePath","input","string","name","substr","lastIndexOf","split","getFile","charAt","toUpperCase","slice","output","concat","firstTag","imports","collect","value","props","argumentTags","parser","createParser","onText","event","onPlaceholder","escaped","withinBody","withinAttribute","withinString","withinOpenTag","pos","onCDATA","onOpenTag","tagName","attributes","argument","funcName","nameAttr","find","a","outputName","replace","push","enterParsedTextContentState","map","attribute","join","onCloseTag","includes","onDocumentType","onDeclaration","onComment","onScriptlet","Error","onError","message","code","console","log","parse","flowType","functionArgs","App","state","_this2","this","convert","react_default","createElement","onClick","setState","style","display","width","lib_default","onValueChange","highlight","languages","markup","padding","fontFamily","fontSize","height","js","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f09e40b9.chunk.js","sourcesContent":["var htmljs = require('htmljs-parser');\n\nfunction getFile(filePath) {\n    return filePath.substr(filePath.lastIndexOf('\\/') + 1).split('.')[0];\n}\n\nfunction sentanceCase(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n\n\n\nfunction parseFile(filePath, input)  {\n    const name = sentanceCase(getFile(filePath));\n    \n\n\n    let output = `const ${name} = ({ props } : Props) => { \\n`\n\nlet firstTag = true;\n\nconst imports = {\n    collect: false,\n    value: ''\n}\n\nconst props = {\n    collect: false,\n    value: ''\n}\n\nconst argumentTags = []\n\nvar parser = require('htmljs-parser').createParser({\n    onText: function(event) {\n        // Text within an HTML element\n        var value = event.value;\n        //console.log('text', event)\n        if(imports.collect) {\n            imports.value += value;\n            imports.collect = false\n            return\n        }\n        if(props.collect) {\n            props.value += value;\n            props.collect = false\n            return\n        }\n        output += value;\n    },\n\n    onPlaceholder: function(event) {\n        //  ${<value>]} // escape = true\n        // $!{<value>]} // escape = false\n        var value = event.value; // String\n        var escaped = event.escaped; // boolean\n        var withinBody = event.withinBody; // boolean\n        var withinAttribute = event.withinAttribute; // boolean\n        var withinString = event.withinString; // boolean\n        var withinOpenTag = event.withinOpenTag; // boolean\n        var pos = event.pos; // Integer\n        //console.log('ph', event)\n        \n            output += `{ ${value} }`\n        \n    },\n\n    onCDATA: function(event) {\n        // <![CDATA[<value>]]>\n        var value = event.value; // String\n        var pos = event.pos; // Integer\n       // console.log('cdata', event)\n    },\n\n    onOpenTag: function(event) {\n        var tagName = event.tagName; // String\n        var attributes = event.attributes; // Array\n        var argument = event.argument; // Object\n        var pos = event.pos; // Integer\n       // console.log('ot', event)\n\n       if(argument) {\n           const funcName = tagName\n           const nameAttr = attributes.find(a => a.name[0] === ':')\n           const outputName = nameAttr && nameAttr.name.replace(':', '')\n           \n            argumentTags.push(tagName)\n           output += `\n           { ${funcName}(${argument.value})((${outputName ? outputName : ''}) => (<>\n           `;\n           return;\n       }\n   \n        if(tagName === 'imports') {\n            parser.enterParsedTextContentState();\n            imports.collect = true;\n            return;\n        } \n\n        if(tagName === 'props') {\n            parser.enterParsedTextContentState();\n            props.collect = true;\n            return;\n        } \n\n     \n        if(firstTag) {\n            firstTag = false;\n            output += `return (<>`\n        }\n\n\n        output += `<${tagName} ${attributes.map((attribute) => {\n            return `${attribute.name}={ ${attribute.value} } `\n        }).join(' ')}>`;\n\n    },\n\n    onCloseTag: function(event) {\n        // close tag\n        var tagName = event.tagName; // String\n        var pos = event.pos; // Integer\n        if(tagName === 'imports' || tagName === 'props') {\n            return;\n        }\n        if(argumentTags.includes(tagName)) {\n            output += '</>))}';\n            return\n        }\n       // console.log('ct', event)\n        output += `</${tagName}>`;\n    },\n\n    onDocumentType: function(event) {\n        // Document Type/DTD\n        // <!<value>>\n        // Example: <!DOCTYPE html>\n        var value = event.value; // String\n        var pos = event.pos; // Integer\n      //  console.log('dt', event)\n    },\n\n    onDeclaration: function(event) {\n        // Declaration\n        // <?<value>?>\n        // Example: <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n        var value = event.value; // String\n        var pos = event.pos; // Integer\n      //  console.log('d', event)\n    },\n\n    onComment: function(event) {\n        // Text within XML comment\n        var value = event.value; // String\n        var pos = event.pos; // Integer\n      //  console.log('c', event)\n    },\n\n    onScriptlet: function(event) {\n        // Text within <% %>\n        var value = event.value; // String\n        var pos = event.pos; // Integer\n     //   console.log('sc', event)\n        if(!firstTag) {\n            throw new Error('RAR')\n        }\n        output += value;\n        \n    },\n\n    onError: function(event) {\n        // Error\n        var message = event.message; // String\n        var code = event.code; // String\n        var pos = event.pos; // Integer\n        console.log('error', event)\n    }\n});\n\n\nparser.parse(input);\n\nconst flowType = props.value\n\nconst functionArgs = props.value.split(',').map(a => a.split(':')[0]).join(',')\noutput += '</>) \\n }'\noutput = `\n//@flow\n${ imports.value || `import React from 'react';`}\ntype Props = {\n    ${flowType}\n}\n${ output.replace('props', functionArgs) }\nexport default ${name};\n`\nreturn (output)\n}\n\n\n\n\n\n\nexport default parseFile;","import React from 'react';\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-markup';\n\nimport 'prismjs/themes/prism.css';\nimport convert from './convert' \nimport { root } from 'postcss-selector-parser';\n\nconst code = `\n<props>\n  title: string,\n  content: string\n</props>\n\n<div>\n  <h1>{title}</h1>\n  <p>{content}</p>\n</div>\n`;\n\nconst code2 = `\n<imports>\nimport React from 'react'\nimport Test from './Test'\nimport BasicCard from './BasicCard'\n</imports>\n\n<Test world='world' intialCount=10 />\n<BasicCard title='Awesome' content='A hole lot of content' />\n`\n \nconst testcode = `\n<imports> \nimport React, { useState } from 'react'\n</imports>\n\n<props>\n    world: string,\n    intialCount: number,\n</props>\n\n$ const [ count, setCounter ] = useState(intialCount)\n\n$ const increment = () => setCounter(count + 1)\n$ const decrement = () => setCounter(count - 1)\n$ const groups = [{ name: 'Test', numbers: [14, 18] }, { name: 'Other', numbers: [20,30]}];\n\n\n$ const map = (input) => (block) => input.map(value => block(value))\n\n$ const If = (input) => (block) => input && block()\n\n\n<div>\nHello \\${world}\nWow this is really crazy \\${ count }\n<div>\n  its just html\n</div>\n\n<map(groups) :group>\n  \\${ group.name }\n  <map(group.numbers) :number>\n    <button onClick=(() => setCounter(number))>{number}</button>\n  </map> \n</map>\n\n<If(count === 10)>\n  <div>its 10</div>\n</If>\n\n<If(count > 14)>\n  <div>Wow its over 14</div>\n</If>\n\n\n\n<button onClick=increment>increment</button>\n<button onClick=decrement>decrement</button>\n</div>\n`\nclass App extends React.Component {\n  state = { code };\n \n  render() {\n    const output = convert('awesomeo.ma', this.state.code)\n    return (\n\n      <div>\n         <button onClick={() => this.setState({ code })}>Card.htmlx</button>\n      <button onClick={() => this.setState({ code: code2 })}>Root.htmlx</button>\n      <button onClick={() => this.setState({ code: testcode })}>Test.htmlx</button>\n\n      <div style={{ display: 'flex' }}>\n     \n        <div style={{ width: '50%', }}>\n      <Editor \n        value={this.state.code}\n        onValueChange={code => this.setState({ code })}\n        highlight={code => {\n          return highlight(code, languages.markup)\n          }}\n        padding={10}\n        style={{\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n          fontSize: 12,\n          height: '100vh',\n        }}\n      />\n        </div>\n        <div style={{ width: '50%' }}>\n      <Editor \n        value={output}\n        onValueChange={code => {}}\n        highlight={code => highlight(code, languages.js)}\n        padding={10}\n        style={{\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n          fontSize: 12,\n          height: '100vh',\n        }}\n      />\n              </div>\n    \n      </div>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}