{"version":3,"sources":["../../morph/morph-compiler/cssToJSXStyle.js","App.js","serviceWorker.js","index.js","../../morph/morph-compiler/index.js"],"names":["cssParser","__webpack_require__","cleanPropertyName","name","replace","v","toUpperCase","mediaNameGenerator","nameGenerator","module","exports","inputCssText","Error","bootstrapWithCssClass","indexOf","concat","result","transformRules","self","rules","forEach","rule","obj","type","media","__expression__","declarations","declaration","cleanProperty","property","value","selectors","selector","trim","this","parse","stylesheet","code","App","state","componentState","exampleState","output","convert","exampleIndex","hideJSX","debugMode","valueChange","i","_this","setState","index","examples","JSON","stringify","content","_this2","react_default","a","createElement","className","onClick","_ref","Fragment","style","display","width","lib_default","onValueChange","highlight","languages","markup","padding","fontFamily","fontSize","height","js","es","key","codeText","noRender","scope","useState","React","ReactDOM","styled","margin","props","split","map","prop","propName","onChange","_ref2","target","Object","objectSpread","defineProperty","example","Component","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","transform","JSON5","sentanceCase","string","charAt","slice","filePath","input","mode","arguments","length","undefined","substr","lastIndexOf","getFile","rootMode","includes","firstTag","imports","collect","argumentTags","staticCode","atTags","hasStyles","addToOutput","parser","createParser","onText","event","collecting","onPlaceholder","withinOpenTag","escaped","withinBody","withinAttribute","withinString","pos","argsCount","onCDATA","onOpenTag","tagName","attributes","argument","handleTag","enterParsedTextContentState","funcName","nameAttr","find","outputName","push","mapping","for","class","join","attribute","mergedClass","shortHandClasses","shorthandClassNames","_unused","word","literalValue","_value","onCloseTag","acc","_ref3","_unused2","_unused3","onDocumentType","onDeclaration","onComment","onScriptlet","onError","message","console","log","flowType","commaSplit","hasSpreder","functionArgs"],"mappings":"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","file":"static/js/main.ca16c025.chunk.js","sourcesContent":["var cssParser = require('css'); //\n// Transform implementation or originally thanks to\n// https://github.com/raphamorim/native-css\n//\n\n\nfunction transformRules(self, rules, result) {\n  rules.forEach(function (rule) {\n    var obj = {};\n\n    if (rule.type === 'media') {\n      var name = mediaNameGenerator(rule.media);\n      var media = result[name] = result[name] || {\n        \"__expression__\": rule.media\n      };\n      transformRules(self, rule.rules, media);\n    } else if (rule.type === 'rule') {\n      rule.declarations.forEach(function (declaration) {\n        if (declaration.type === 'declaration') {\n          var cleanProperty = cleanPropertyName(declaration.property);\n          obj[cleanProperty] = declaration.value;\n        }\n      });\n      rule.selectors.forEach(function (selector) {\n        var name = nameGenerator(selector.trim());\n        result[name] = obj;\n      });\n    }\n  });\n}\n\nvar cleanPropertyName = function cleanPropertyName(name) {\n  // turn things like 'align-items' into 'alignItems'\n  name = name.replace(/(-.)/g, function (v) {\n    return v[1].toUpperCase();\n  });\n  return name;\n};\n\nvar mediaNameGenerator = function mediaNameGenerator(name) {\n  return '@media ' + name;\n};\n\nvar nameGenerator = function nameGenerator(name) {\n  name = name.replace(/\\s\\s+/g, ' ');\n  name = name.replace(/[^a-zA-Z0-9]/g, '_');\n  name = name.replace(/^_+/g, '');\n  name = name.replace(/_+$/g, '');\n  return name;\n};\n\nfunction transform(inputCssText) {\n  if (!inputCssText) {\n    throw new Error('missing css text to transform');\n  } // If the input \"css\" doesn't wrap it with a css class (raw styles)\n  // we need to wrap it with a style so the css parser doesn't choke.\n\n\n  var bootstrapWithCssClass = false;\n\n  if (inputCssText.indexOf(\"{\") === -1) {\n    bootstrapWithCssClass = true;\n    inputCssText = \".bootstrapWithCssClass { \".concat(inputCssText, \" }\");\n  }\n\n  var css = cssParser.parse(inputCssText);\n  var result = {};\n  transformRules(this, css.stylesheet.rules, result); // Don't expose the implementation detail of our wrapped css class.\n\n  if (bootstrapWithCssClass) {\n    result = result.bootstrapWithCssClass;\n  }\n\n  return result;\n}\n\nmodule.exports = transform;","import React, { useState } from 'react';\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-markup';\nimport Playground from 'component-playground';\nimport ReactDOM from 'react-dom';\nimport 'todomvc-app-css/index.css';\nimport './App.css'\n\nimport {\n  LiveProvider,\n  LivePreview,\n  LiveEditor\n} from 'react-live'\n\nimport 'prismjs/themes/prism.css';\nimport convert from '@morphx/morphx-compiler' \nimport { root } from 'postcss-selector-parser';\nimport styled from 'styled-components';\n\n\nconst code = `\n<props>\n  label: string,\n  color: string,\n  fontSize: number\n</props>\n\n<example>\n  label: 'helloworld',\n  color: 'blue',\n  fontSize: 10,\n</example>\n\n\n$ let color2 = 'green'\n$ const anotherOne = color\n\n<style>\n.test { \n  padding: 50px;\n  background-color: \\${color2 || color};\n  font-size: \\${fontSize * 10}px;\n}\n</style>\n\n$ color2 = 'orange'\n\n$ if(!label) {\n  return <div class=\"unconfigured\">Button</div>\n}\n\n\n\n<div class=\"test\">\nClass Way\n</div>\n<div.test>\n  <a href=\"#\" role=\"button\">\\${label}</a>\n</div>\n   `\n\n   const codeabc = `\n\n\nprops {\n  properties: { label: string }\n}\n\n<example>\nproperties: {\n  label: 'helloworld',\n}\n</example>\n\n\n<style>\n.test { \nbackground-color: red;\n}\n</style>\n\n\n$ if(properties && !properties.label) {\n  return <div class=\"unconfigured\">Button</div>\n}\n\n\n<@Use :render>\n{render({})}\n</@Use>\n\n<Use(\"we.retail.core.model.Button\") :button>\n\n<div class=\"test\">\n<a\n   class=\"btn btn-primary btn-action cq-dd-linkTo \\${button.cssClass}\"\n   href=\"{button.linkTo == '#' ? '#' : button.linkTo}\" role=\"button\">\\${properties.label}</a>\n   </div>\n   </Use>\n\n`\nconst code1 = `\n<props>\n    title: string,\n    content: string\n</props>\n\n<example name=\"with title of Hello\">\n  title: \"Hello\"\n</example>\n\n<example name=\"with content of Hello\">\n  title: \"My content is Hello\",\n  content: \"Hello\"\n</example>\n\n\n<div>\n    <h1>Title: {title}</h1>\n    <p>Content: {content}</p>\n</div>\n`;\n\nconst code2 = `\n$ const ENTER_KEY = 13;\n\n$ const [todos, setTodos] = useState([{ done: true, name: 'A todo' }, { done: false, name: 'Bob' }])\n$ const [currentFilter, setCurrentFilter] = useState('All')\n\n$ const allCompleted = !todos.find(({ done }) => !done)\n\n\n$ const filtered = {\n    All: todos,\n    Active: todos.filter(({ done }) => !done),\n    Completed: todos.filter(({ done }) => done),\n};\n\n$ const filters = Object.keys(filtered);\n\n$ const [newTodo, setNewTodo] = useState('');\n\n\n$ const updateTodo = (index, update) => {\n      setTodos(todos.map((todo, i) => {\n      if(i === index) {\n        return {\n        ...todo,\n        ...update,\n        }\n      }\n      return todo;\n    }))\n};\n\n$ function toggleTodo(index) {\n  return () => {\n    updateTodo(index,{ done: !todos[index].done })\n  }\n}\n\n$ function completeAllToggle() {\n  setTodos(todos.map((todo) => ({ ...todo, done: !allCompleted }))\n  )\n}\n\n$ function deleteTodo(index)  {\n  return () => {\n    setTodos(todos.filter((todo, i) => i !== index))\n  }\n}\n\n$ function clearCompleted() {\n  setTodos(todos.filter((todo) => !todo.done))\n}\n\n\n$ function handleNewTodoKeyDown(event) {\n  if (event.keyCode !== ENTER_KEY) {\n    return;\n  } \n\n  event.preventDefault();\n\n  var val = newTodo.trim();\n\n  if (val) {\n     setTodos([...todos, {\n       done: false,\n       name: val,\n     }]);\n     setNewTodo('');\n  }\n}\n\n\n<@Map :args :render>\n { args[0].map(value => render(value)) }\n</@Map>\n\n<@MapWithIndex :args :render>\n { args[0].map((value, index) => render({ ...value, index })) }\n</@MapWithIndex>\n\n<@If :args :render>\n { !!args[0] && render() }\n</@If>\n\n\n\n\n<section class=\"todoapp\">\n\t<header class=\"header\">\n\t\t<h1>todos</h1>\n        <input \n            class=\"new-todo\" \n            placeholder=\"What needs to be done?\" \n            autofocus=\"\"\n            value=newTodo\n\t\t\tonKeyDown=handleNewTodoKeyDown\n\t\t\tonChange=(({ target }) => setNewTodo(target.value))\n         />\n\t</header>\n\t<section class=\"main\" style=\"display: block;\">\n        <input class=\"toggle-all\" onChange=completeAllToggle checked=allCompleted id=\"toggle-all\" type=\"checkbox\">\n        <label for=\"toggle-all\">Mark all as complete</label>\n        <ul class=\"todo-list\">\n            <MapWithIndex(filtered[currentFilter]) :todo>\n                <li class=todo.done&&'completed'>\n                    <div class=\"view\">\n                        <input class=\"toggle\" onChange=toggleTodo(todo.index) checked=todo.done type=\"checkbox\">\n                        <label>\\${todo.name}</label>\n                        <button onClick=deleteTodo(todo.index) class=\"destroy\"></button>\n                    </div>\n                    <input class=\"edit\" value=\"A todo\">\n                </li>\n            </MapWithIndex>\n        </ul>\n    </section>\n    <footer class=\"footer\" style=\"display: block;\">\n        <span class=\"todo-count\"><strong>\\${filtered.Active.length}</strong> items left</span>\n        <ul class=\"filters\">\n            <Map(filters) :filter>\n                <li>\n                    <a class=(filter === currentFilter && \"selected\") href=\"#\" onClick=(() => setCurrentFilter(filter))>{filter}</a>\n                </li>\n            </Map>  \n        </ul>\n        <If(filtered.Completed.length)>\n            <button class=\"clear-completed\" onClick=clearCompleted>Clear completed</button>\n        </If>\n    </footer>\n</section>\n\n`\n \nconst testcode = `\n\n\n\n\n\n<props>\n    world: string,\n    intialCount: number\n</props>\n\n<example name=\"Hello World\">\n  world: \"world\",\n  intialCount: \"10\",\n</example>\n$ const [ count, setCounter ] = React.useState(intialCount)\n\n$ const increment = () => setCounter(count + 1)\n$ const decrement = () => setCounter(count - 1)\n$ const groups = [{ name: 'Test', numbers: [14, 18] }, { name: 'Other', numbers: [20,30]}];\n\n$ const obj = { style: { backgroundColor: 'yellow' }}\n\n\n<@Map :args :render>\n { args[0].map(value => render(value)) }\n</@Map>\n<@If :args :render>\n { !!args[0] && render() }\n</@If>\n\n\n<div \\${obj}>\nHello \\${world}\nWow this is really crazy \\${ count }\n<div>\n  its just html\n</div>\n\n<Map(groups) :group>\n \\${ group.name }\n  <Map(group.numbers) :number>\n    <button class=\"myButton\"  onClick=(() => setCounter(number))>{number}</button>\n  </Map> \n</Map>\n\n<If(count == 10)>\n  <div>its 10</div>\n</If>\n\n<If(count > 14)>\n  <div>Wow its over 14</div>\n</If>\n\n\n\n<button class=\"myButton\" onClick=increment>increment</button>\n<button class=\"myButton\"  onClick=decrement>decrement</button>\n</div>\n\n\n\n`\n\n\n\nclass App extends React.Component {\n  state = { \n    code, \n    componentState: {},\n    exampleState: {},\n    output: convert('LiveEditor.web.morph', code),\n    exampleIndex: 0,\n    hideJSX: true,\n    debugMode: 'flowJSX',\n   };\n\n   valueChange = (code, i) => {\n    const output = convert('LiveEditor.web.morph', code)\n     this.setState({ code, output })\n     const index = (i === 0 || i) ? i : this.state.exampleIndex\n     if(output.examples[index]) {\n       if((i === 0 || i) || JSON.stringify(this.state.exampleState) !== JSON.stringify(output.examples[index].content)) {\n        this.setState({ componentState: output.examples[index].content })\n       }\n       this.setState({ exampleState: output.examples[index].content })\n     }\n   }\n   componentDidMount() {\n    this.valueChange(this.state.code);\n   }\n \n  render() {\n    const hideJSX  = this.state.hideJSX\n    const output = this.state.output\n    return (\n\n      <div>\n        \n        <button className=\"myButton\" onClick={() =>this.setState(({ hideJSX }) => ({ hideJSX: !hideJSX  })) }>{ hideJSX ? 'Show Output' : 'Hide Output' }</button>\n        { !hideJSX && <>\n        <button className=\"myButton\" onClick={() =>this.setState({ debugMode: 'flowJSX'  }) }>Flow JS</button>\n        <button className=\"myButton\" onClick={() =>this.setState({ debugMode: 'playground'  })}>Playground</button>\n        <button className=\"myButton\" onClick={() =>this.setState({ debugMode: 'HTL'  }) }>HTL</button>\n        </>}\n\n      <button className=\"myButton\"  onClick={() =>this.valueChange(code)}>Card.htmlx</button>\n      <button className=\"myButton\" onClick={() => this.valueChange(code2)}>TodoMVC.htmlx</button>\n      <button className=\"myButton\"  onClick={() => this.valueChange(testcode)}>Test.htmlx</button>\n\n      <div style={{ display: 'flex' }}>\n     \n        <div style={{ width: hideJSX ? '50%': '30%', }}>\n      <Editor \n        value={this.state.code}\n        onValueChange={this.valueChange}\n        highlight={code => {\n          return highlight(code, languages.markup)\n          }}\n        padding={10}\n        style={{\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n          fontSize: 12,\n          height: '100vh',\n        }}\n      />\n        </div>\n        { !hideJSX && <div style={{ width: hideJSX ? '50%': '30%', }}>\n      <Editor \n        value={ convert('LiveEditor.web.morph', this.state.code, this.state.debugMode).output }\n        onValueChange={code => {}}\n        highlight={code => highlight(code, languages.js)}\n        padding={10}\n        style={{\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n          fontSize: 12,\n          height: '100vh',\n        }}\n      />\n      \n\n        \n      \n              </div>\n        }\n              <div style={{ width: hideJSX ? '50%': '30%', }}>\n\n        <Playground \n        key={JSON.stringify(this.state.componentState)}  \n codeText={ convert('LiveEditor.web.morph', this.state.code, 'playground').output} noRender={false} scope={{ useState, componentState: this.state.componentState, React: React, ReactDOM: ReactDOM, styled }}/>\n            \n            <div  style={{margin: 200}}></div>\n            <h1>Props:</h1>\n\n            {output.props.split(',').map((prop) => {\n              const propName = prop.split(':')[0].replace(/\\s/g, '')\n              const type = prop.split(':')[1]\n              return <div>{prop}<input value={type === 'string' ? this.state.componentState[propName] || '' : JSON.stringify(this.state.componentState[propName])} onChange={({ target }) => this.setState({ \n                componentState: {\n                ...this.state.componentState,\n                [propName]: type === 'string' ? target.value : JSON.parse(target.value),\n              }\n            })\n          }></input></div>\n            })}\n            {this.state.output.examples.map((example, i) => <button \n            className=\"myButton\"\n            onClick={() => {\n              this.setState({exampleIndex: i})\n              this.valueChange(this.state.code, i)\n              }}>{this.state.exampleIndex === i && 'current: '}{example.name}</button> )}\n              </div>//\n      </div>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var transform = require('./cssToJSXStyle');\n\nvar htmljs = require('htmljs-parser');\n\nvar JSON5 = require('json5');\n\nfunction getFile(filePath) {\n  return filePath.substr(filePath.lastIndexOf('\\/') + 1).split('.')[0];\n}\n\nfunction sentanceCase(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction parseFile(filePath, input) {\n  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'flowJSX';\n  var name = sentanceCase(getFile(filePath));\n  var webMode = filePath.includes('web');\n  var rootMode = !webMode;\n  var examples = [];\n  var output = \"const \".concat(name, \" = ({ props } : Props) => {\\n let styleArgs = []\\n\");\n\n  if (mode === 'playground') {\n    output = \"const \".concat(name, \" = ({ props }) => { \\n let styleArgs = []\\n\");\n  }\n\n  var firstTag = true;\n  var imports = {\n    collect: false,\n    value: ''\n  };\n  var props = {\n    collect: false,\n    value: ''\n  };\n  var example = {\n    collect: false,\n    value: ''\n  };\n  var argumentTags = [];\n  var staticCode = {\n    collect: false,\n    value: ''\n  };\n  var atTags = {\n    collect: false,\n    value: ''\n  };\n  var style = {\n    collect: false,\n    value: ''\n  };\n  var hasStyles = false;\n\n  function addToOutput(value) {\n    if (atTags.collect) {\n      atTags.value += value;\n      return;\n    }\n\n    output += value;\n  }\n\n  function addToStyleOutput(value) {\n    staticCode.value += 'const StyledDivWrapper = styled.div`' + value + '`;';\n  }\n\n  var parser = require('htmljs-parser').createParser({\n    onText: function onText(event) {\n      // Text within an HTML element\n      var value = event.value; //console.log('text', event)\n\n      if (imports.collect) {\n        imports.value += value;\n        imports.collect = false;\n        return;\n      }\n\n      var collecting = [imports, props, example, staticCode, style];\n\n      for (var i = 0; i < collecting.length; i++) {\n        if (collecting[i].collect) {\n          collecting[i].value += value;\n          return;\n        }\n      }\n\n      addToOutput(value);\n    },\n    onPlaceholder: function onPlaceholder(event) {\n      //  ${<value>]} // escape = true\n      // $!{<value>]} // escape = false\n      var value = event.value; // String\n\n      var escaped = event.escaped; // boolean\n\n      var withinBody = event.withinBody; // boolean\n\n      var withinAttribute = event.withinAttribute; // boolean\n\n      var withinString = event.withinString; // boolean\n\n      var withinOpenTag = event.withinOpenTag; // boolean\n\n      var pos = event.pos; // Integer\n\n      if (withinOpenTag) {\n        return;\n      }\n\n      if (style.collect) {\n        style.argsCount = style.argsCount + 1 || 0;\n        style.value += \"${({ styleArgs }) => styleArgs[\".concat(style.argsCount, \"] }\");\n        addToOutput(\"styleArgs[\".concat(style.argsCount, \"] = \") + value + ';\\n');\n        return;\n      }\n\n      addToOutput(\"{ \".concat(value, \" }\"));\n    },\n    onCDATA: function onCDATA(event) {\n      // <![CDATA[<value>]]>\n      var value = event.value; // String\n\n      var pos = event.pos; // Integer\n      // console.log('cdata', event)\n    },\n    onOpenTag: function onOpenTag(event) {\n      var tagName = event.tagName; // String\n\n      var attributes = event.attributes; // Array\n\n      var argument = event.argument; // Object\n\n      var pos = event.pos; // Integer\n      // console.log('ot', event)\n\n      function handleTag(name, obj) {\n        if (tagName === name) {\n          parser.enterParsedTextContentState();\n          obj.collect = true;\n          obj.event = event;\n\n          if (event.attributes && event.attributes[0] && event.attributes[0].name && event.attributes[0].name[0] === '{' && event.attributes[0].name[event.attributes[0].name.length - 1] === '}') {\n            obj.value += event.attributes[0].name.slice(1, event.attributes[0].name.length - 1);\n          }\n\n          return true;\n        }\n\n        return false;\n      }\n\n      if (argument) {\n        var funcName = tagName;\n        var nameAttr = attributes.find(function (a) {\n          return a.name[0] === ':';\n        });\n        var outputName = nameAttr && nameAttr.name.replace(':', '');\n\n        if (tagName === 'Use' && mode === 'HTL') {\n          addToOutput(\"<sly data-sly-use.\".concat(outputName, \"=\").concat(argument.value, \">\"));\n          return;\n        }\n\n        argumentTags.push(tagName);\n        addToOutput(\"\\n            <\".concat(funcName, \" args={[\").concat(argument.value, \"]} render={((\").concat(outputName ? outputName : '', \") => (<React.Fragment>\\n           \"));\n        return;\n      }\n\n      if (handleTag('imports', imports)) {\n        return;\n      }\n\n      if (tagName === 'import') {\n        imports.value += 'import ' + event.attributes.map(function (_ref) {\n          var name = _ref.name;\n          return name;\n        }).join(' ') + ';\\n';\n        return;\n      }\n\n      if (handleTag('props', props)) {\n        return;\n      }\n\n      if (handleTag('style', style)) {\n        hasStyles = true;\n        return;\n      }\n\n      if (handleTag('example', example)) {\n        return;\n      }\n\n      var mapping = {\n        for: 'htmlFor',\n        class: 'className'\n      };\n\n      if (tagName === 'static') {\n        // TODO: maybe handleTag?\n        parser.enterParsedTextContentState();\n        staticCode.collect = true;\n        staticCode.value += event.attributes && event.attributes.map(function (_ref2) {\n          var name = _ref2.name;\n          return name;\n        }).join(' ');\n        return;\n      }\n\n      if (firstTag) {\n        firstTag = false;\n\n        var _wrapper = hasStyles ? '<StyledDivWrapper styleArgs={styleArgs}>' : '<React.Fragment>';\n\n        addToOutput(\"return (\" + _wrapper);\n      }\n\n      if (tagName[0] === '@') {\n        atTags.collect = true;\n        addToOutput('const ' + tagName.replace('@', '') + ' = ({' + attributes.map(function (attribute) {\n          return attribute.name.replace(':', '');\n        }).join(',') + '}) => (<React.Fragment>');\n        return;\n      } // TODO: make this actually only look for import name whole ie a component called Bob would mach for `import Bobby from`\n\n\n      if (!imports.value.includes(tagName) && rootMode) {\n        addToOutput('Errrorr, ' + tagName + ' not imported and in rootmode here is Imports: ' + imports.value);\n      }\n\n      debugger;\n      var mergedClass = false;\n      var shortHandClasses = event.shorthandClassNames && event.shorthandClassNames.map(function (a) {\n        try {\n          return JSON.parse(a.value);\n        } catch (_unused) {\n          return a.value;\n        }\n      }).join(' ');\n      var attribute = attributes.map(function (attribute) {\n        var name = mapping[attribute.name] || attribute.name;\n\n        if (!name) {\n          return \"{...\".concat(attribute.value, \"}\");\n        }\n\n        name = name.split('-').map(function (word, i) {\n          return i === 0 ? word : sentanceCase(word);\n        }).join('');\n\n        if (name === 'style') {\n          if (attribute.value[0] === '\"') {\n            return \"\".concat(name, \"={\").concat(JSON.stringify(transform(attribute.literalValue)), \"}\");\n          }\n        }\n\n        if (attribute.value && name === 'className') {\n          mergedClass = true;\n          var _value = attribute.value;\n\n          if (_value[0] === '[') {\n            _value = _value + \".filter((a) => a).join(' ')\";\n          }\n\n          if (_value[0] === '{') {\n            _value = \"Object.entries(\" + _value + \").filter((a) => a[1]).map(a => a[0]).join(' ')\";\n          }\n\n          if (shortHandClasses) {\n            _value = \"\\\"\".concat(shortHandClasses, \" \\\" + \").concat(_value);\n          }\n\n          return \"className={\".concat(_value, \"}\"); //  \n        }\n\n        var value = attribute.value ? attribute.value[0] === '\"' ? attribute.value : JSON.stringify(attribute.value) : JSON.stringify(attribute.argument);\n        return mode === 'HTL' ? \"\".concat(name, \"=\\\"\").concat(value, \"\\\"\") : \"\".concat(name, \"={ \").concat(value, \" } \");\n      }).join(' ');\n      addToOutput(\"<\".concat(tagName, \" \").concat(!mergedClass && shortHandClasses ? \"className=\\\"\".concat(shortHandClasses, \"\\\"\") : '', \" \").concat(attribute, \">\"));\n    },\n    onCloseTag: function onCloseTag(event) {\n      // close tag\n      var tagName = event.tagName; // String\n\n      var pos = event.pos; // Integer\n\n      function handleTag(name, obj) {\n        if (tagName === name) {\n          obj.collect = false;\n          return true;\n        }\n      }\n\n      if (handleTag('imports', imports)) {\n        return;\n      }\n\n      if (handleTag('props', props)) {\n        return;\n      }\n\n      if (handleTag('static', props)) {\n        return;\n      }\n\n      if (tagName[0] === '@') {\n        addToOutput('</React.Fragment >)\\n');\n        atTags.collect = false;\n        return;\n      }\n\n      if (tagName === 'Use' && mode === \"HTL\") {\n        addToOutput(\"</sly >\");\n        return;\n      }\n\n      if (tagName === 'style') {\n        addToStyleOutput(style.value);\n        style.value = '';\n        style.collect = false;\n        return;\n      }\n\n      if (tagName === 'example') {\n        var acc = {};\n        example.event.attributes.forEach(function (_ref3) {\n          var name = _ref3.name,\n              value = _ref3.value;\n\n          try {\n            acc[name] = JSON5.parse(value);\n          } catch (_unused2) {\n            addToOutput('ERRERE');\n          }\n        });\n\n        try {\n          acc.content = JSON5.parse(\"{\".concat(example.value, \"}\"));\n          example.value = '';\n          examples.push(acc);\n        } catch (_unused3) {\n          addToOutput('error!');\n        }\n\n        example.collect = false;\n        return;\n      }\n\n      if (argumentTags.includes(tagName)) {\n        addToOutput('</ React.Fragment>))} />');\n        return;\n      } // console.log('ct', event)\n\n\n      addToOutput(\"</\".concat(tagName, \">\"));\n    },\n    onDocumentType: function onDocumentType(event) {\n      // Document Type/DTD\n      // <!<value>>\n      // Example: <!DOCTYPE html>\n      var value = event.value; // String\n\n      var pos = event.pos; // Integer\n      //  console.log('dt', event)\n    },\n    onDeclaration: function onDeclaration(event) {\n      // Declaration\n      // <?<value>?>\n      // Example: <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n      var value = event.value; // String\n\n      var pos = event.pos; // Integer\n      //  console.log('d', event)\n    },\n    onComment: function onComment(event) {\n      // Text within XML comment\n      var value = event.value; // String\n\n      var pos = event.pos; // Integer\n      //  console.log('c', event)\n    },\n    onScriptlet: function onScriptlet(event) {\n      // Text within <% %>\n      var value = event.value; // String\n\n      var pos = event.pos; // Integer\n      //   console.log('sc', event)\n      // if(!firstTag) {\n      //     addToOutput('erorr!!!'\n      // }\n\n      addToOutput(value);\n    },\n    onError: function onError(event) {\n      // Error\n      var message = event.message; // String\n\n      var code = event.code; // String\n\n      var pos = event.pos; // Integer\n\n      console.log('error', event);\n    }\n  });\n\n  parser.parse(input);\n  var flowType = '{ \\n' + props.value + '\\n }';\n  var commaSplit = flowType.split(',');\n  var hasSpreder = commaSplit.find(function (a) {\n    return a.includes('...');\n  });\n\n  if (hasSpreder) {\n    if (commaSplit.length <= 2) {\n      flowType = hasSpreder.replace('...', '').split(':')[1];\n    } else {\n      flowType = 'errFlowType';\n    }\n  }\n\n  var functionArgs = props.value.split(',').map(function (a) {\n    return a.split(':')[0];\n  }).join(',');\n  var wrapper = hasStyles ? '</StyledDivWrapper >' : '</React.Fragment>';\n  addToOutput(wrapper + ') \\n }');\n  output = \"\\n\".concat(mode === 'playground' ? '' : '//@flow', \"\\n\").concat(mode === 'playground' ? '' : \"import React from 'react'; \\nimport styled from 'styled-components'; \\n \".concat(imports.value), \"\\n\").concat(mode === 'playground' ? '' : \"type Props = \".concat(flowType), \"\\n\").concat(staticCode.value, \"\\n\").concat(output.replace('props', functionArgs), \"\\n\").concat(atTags.value, \"\\n\").concat(mode === 'playground' ? \"\\nReactDOM.render(<\".concat(name, \" {...componentState}/>, mountNode);\\n\") : \"\\nexport default \".concat(name, \";\\n\"), \"\\n\\n\");\n  debugger;\n  return {\n    examples: examples,\n    output: output,\n    props: props.value\n  };\n}\n\nmodule.exports = parseFile;"],"sourceRoot":""}